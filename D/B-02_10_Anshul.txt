NAME: ANSHUL AHER
CLASS: TE COMP 3
BATCH: P
ROLL NO: 10
ASSIGNMENT : B2

------------------------------------------------------------------------------------------------------------------------------------------

test> use Company_system
switched to db Company_system

PART A:

Q.1] Return Designation with Total Salary is Above 200000
db.Comapnies.aggregate([{$group:{ _id: "$designation", totalSalary: { $sum: "$salary" }}}, { $match: { totalSalary: { $gt: 200000 }} }, { $project: { designation: "$_id", totalSalary: 1 } }])
>> EMPTY SET

Q.2] Find Employee with Total Salary for Each City with Designation="DBA"
Company_system> db.Comapnies.aggregate([{ $match: { designation: "DBA" } }, { $group: { _id: "$city", totalSalary: { $sum: "$salary" } } }])
>> EMPTY SET

Q.3] Find Total Salary of Employee with Designation="DBA" for Each Company
Company_system> db.Comapnies.aggregate([ { $match: { designation: "DBA" } }, { $group: { _id: "$cname", totalSalary: { $sum: "$salary" } } }] )
>> EMPTY SET

Q.4] Returns names and _id in upper case and in alphabetical order.
Company_system> db.Comapnies.aggregate([ { $project: { _id: 0, Name: { $toUpper: "$name" } } }, { $sort: { Name: 1 } }] )
[
  { Name: 'ANKUSH' },
  { Name: 'AYUSH' },
  { Name: 'HENRY' },
  { Name: 'JOHN' },
  { Name: 'RAKESH' },
  { Name: 'ROHAN' },
  { Name: 'ROHIT' },
  { Name: 'ZEUS' }
]

Q.5] Count all records from collection
Company_system> db.Comapnies.countDocuments()
8

Q.6] For each unique Designation, find avg Salary and output is sorted by AvgSal
Company_system> db.Comapnies.aggregate([ { $group: { _id: "$designation", AvgSal: { $avg: "$salary" } } }, { $sort: { AvgSal: 1 } }] )
[
  { _id: 'Content Writer', AvgSal: 5000 },
  { _id: 'Tester', AvgSal: 32000 },
  { _id: 'Developer', AvgSal: 55000 }
]

Q.7] Return separates value in the Expertise array where Name of Employee="Swapnil"
Company_system> db.Comapnies.aggregate([ { $match: { name: "Swapnil" } }, { $unwind: "$expertise" }, { $project: { _id: 0, Expertise: 1 } }] )
>> EMPTY SET

Q.8] Return separates value in the Expertise array and return sum of each element of array
Company_system> db.Comapnies.aggregate([ { $unwind: "$expertise" }, { $group: { _id: "$expertise", totalSum: { $sum: 1 } } }] )
[
  { _id: 'MySQL', totalSum: 3 },
  { _id: 'MongoDB', totalSum: 4 },
  { _id: 'Casandra', totalSum: 1 }
]

Q.9] Return Array for Designation whose address is "Pune"
Company_system> db.Comapnies.aggregate([ { $match: { "address.city": "Pune" } }, { $group: { _id: "$designation", employees: { $push: "$name" } } }] )
[
  { _id: 'Developer', employees: [ 'Ankush', 'Henry' ] },
  { _id: 'Content Writer', employees: [ 'Rakesh' ] },
  { _id: 'Tester', employees: [ 'Rohan' ] }
]

Q.10] Return Max and Min Salary for each company.
Company_system> db.Comapnies.aggregate([ { $group: { _id: "$cname", maxSalary: { $max: "$salary" }, minSalary: { $min: "$salary" } } }] )
[
  { _id: 'Wipro', maxSalary: 10000, minSalary: 10000 },
  { _id: 'TCS', maxSalary: 100000, minSalary: 20000 },
  { _id: 'Infosys', maxSalary: 20000, minSalary: 5000 }
]

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

PART B:

Q.1] To Create Single Field Indexes on Designation
Company_system> db.Comapnies.createIndex({ designation: 1 })
designation_1
Company_system> db.Comapnies.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { designation: 1 }, name: 'designation_1' }
]

Q.2] To Create Compound Indexes on Name: 1, Age: -1
Company_system> db.Comapnies.createIndex({ name: 1, age: -1 })
name_1_age_-1
Company_system> db.Comapnies.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { designation: 1 }, name: 'designation_1' },
  { v: 2, key: { name: 1, age: -1 }, name: 'name_1_age_-1' }
]

Q.3] To Create Multikey Indexes on Expertise array
Company_system> db.Comapnies.createIndex({ "EXPERTIES.KEY1": 1, "EXPERTIES.KEY2": 1 })
EXPERTIES.KEY1_1_EXPERTIES.KEY2_1
Company_system> db.Comapnies.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { designation: 1 }, name: 'designation_1' },
  { v: 2, key: { name: 1, age: -1 }, name: 'name_1_age_-1' },
  {
    v: 2,
    key: { 'EXPERTIES.KEY1': 1, 'EXPERTIES.KEY2': 1 },
    name: 'EXPERTIES.KEY1_1_EXPERTIES.KEY2_1'
  }
]

Q.4] Return a List of All Indexes on Collection
Company_system> db.Comapnies.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { designation: 1 }, name: 'designation_1' },
  { v: 2, key: { name: 1, age: -1 }, name: 'name_1_age_-1' },
  {
    v: 2,
    key: { 'EXPERTIES.KEY1': 1, 'EXPERTIES.KEY2': 1 },
    name: 'EXPERTIES.KEY1_1_EXPERTIES.KEY2_1'
  }
]

Q.5] Rebuild Indexes
Company_system> db.Comapnies.reIndex()
{
  nIndexesWas: 4,
  nIndexes: 4,
  indexes: [
    { v: 2, key: { _id: 1 }, name: '_id_' },
    { v: 2, key: { designation: 1 }, name: 'designation_1' },
    { v: 2, key: { name: 1, age: -1 }, name: 'name_1_age_-1' },
    {
      v: 2,
      key: { 'EXPERTIES.KEY1': 1, 'EXPERTIES.KEY2': 1 },
      name: 'EXPERTIES.KEY1_1_EXPERTIES.KEY2_1'
    }
  ],
  ok: 1
}

Q.6] Drop Index on Remove Specific Index
Company_system> db.Comapnies.dropIndex({'designation':1})
{ nIndexesWas: 4, ok: 1 }
Company_system> db.Comapnies.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { name: 1, age: -1 }, name: 'name_1_age_-1' },
  {
    v: 2,
    key: { 'EXPERTIES.KEY1': 1, 'EXPERTIES.KEY2': 1 },
    name: 'EXPERTIES.KEY1_1_EXPERTIES.KEY2_1'
  }
]

Q.7] Remove All Indexes except for the _id index from a collection
Company_system> db.Comapnies.dropIndexes()
{
  nIndexesWas: 3,
  msg: 'non-_id indexes dropped for collection',
  ok: 1
}
Company_system> db.Comapnies.getIndexes()
[ { v: 2, key: { _id: 1 }, name: '_id_' } ]




